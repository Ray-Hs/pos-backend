[2025-08-06 12:08:34] error: Image deletion failed: Image not found
[2025-08-06 12:08:50] error: Image deletion failed: Image not found
[2025-08-09 11:35:47] error: Order cancellation print failed on 192.168.1.100: Socket timeout
{
  "stack": "Error: Socket timeout\n    at Socket.<anonymous> (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\node-thermal-printer\\lib\\interfaces\\network.js:76:16)\n    at Socket.emit (node:events:507:28)\n    at Socket.emit (node:domain:489:12)\n    at Socket._onTimeout (node:net:604:8)\n    at listOnTimeout (node:internal/timers:608:17)\n    at processTimers (node:internal/timers:543:7)"
}
[2025-08-10 15:37:59] error: Create Order Service:  Transaction API error: Transaction already closed: A commit cannot be executed on an expired transaction. The timeout for this transaction was 5000 ms, however 7527 ms passed since the start of the transaction. Consider increasing the interactive transaction timeout or doing less work in the transaction.
{
  "code": "P2028",
  "meta": {
    "error": "Transaction already closed: A commit cannot be executed on an expired transaction. The timeout for this transaction was 5000 ms, however 7527 ms passed since the start of the transaction. Consider increasing the interactive transaction timeout or doing less work in the transaction."
  },
  "clientVersion": "6.9.0",
  "name": "PrismaClientKnownRequestError",
  "stack": "PrismaClientKnownRequestError: Transaction API error: Transaction already closed: A commit cannot be executed on an expired transaction. The timeout for this transaction was 5000 ms, however 7527 ms passed since the start of the transaction. Consider increasing the interactive transaction timeout or doing less work in the transaction.\n    at Gr.transaction (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:111:12816)\n    at async Proxy._transactionWithCallback (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:8173)\n    at async OrderServices.createOrder (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\domain\\order\\order.services.ts:207:28)\n    at async createOrder (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\api\\controllers\\table\\order.controller.ts:55:22)"
}
[2025-08-10 15:40:29] error: Update Invoice Service:  
Invalid `prisma.table.update()` invocation:


An operation failed because it depends on one or more records that were required but not found. No record was found for an update.
{
  "code": "P2025",
  "meta": {
    "modelName": "Table",
    "cause": "No record was found for an update."
  },
  "clientVersion": "6.9.0",
  "name": "PrismaClientKnownRequestError",
  "stack": "PrismaClientKnownRequestError: \nInvalid `prisma.table.update()` invocation:\n\n\nAn operation failed because it depends on one or more records that were required but not found. No record was found for an update.\n    at Zn.handleRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7459)\n    at Zn.handleAndLogRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at Zn.request (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n    at async D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\domain\\invoice\\invoice.services.ts:713:27\n    at async Proxy._transactionWithCallback (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:8139)\n    at async InvoiceServices.updateInvoice (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\domain\\invoice\\invoice.services.ts:683:41)\n    at async updateInvoice (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\api\\controllers\\invoice\\invoice.controller.ts:94:22)"
}
[2025-08-10 15:51:57] error: 
Invalid `prisma.service.findFirst()` invocation:


Can't reach database server at `switchback.proxy.rlwy.net:51374`

Please make sure your database server is running at `switchback.proxy.rlwy.net:51374`.
{
  "code": "P1001",
  "meta": {
    "modelName": "Service",
    "database_host": "switchback.proxy.rlwy.net",
    "database_port": 51374
  },
  "clientVersion": "6.9.0",
  "name": "PrismaClientKnownRequestError",
  "stack": "PrismaClientKnownRequestError: \nInvalid `prisma.service.findFirst()` invocation:\n\n\nCan't reach database server at `switchback.proxy.rlwy.net:51374`\n\nPlease make sure your database server is running at `switchback.proxy.rlwy.net:51374`.\n    at Zn.handleRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7459)\n    at Zn.handleAndLogRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at Zn.request (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n    at async Promise.all (index 1)\n    at async getConstantsDB (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\domain\\constants\\constants.repository.ts:6:26)\n    at async ConstantsService.getConstants (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\domain\\constants\\constants.services.ts:24:20)\n    at async getConstants (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\api\\controllers\\constants\\constants.controller.ts:9:22)"
}
[2025-08-11 11:19:06] error: updateOrder failed
{
  "error": "\nInvalid `prisma.invoice.create()` invocation:\n\n\nTransaction API error: Transaction not found. Transaction ID is invalid, refers to an old closed transaction Prisma doesn't have information about anymore, or was obtained before disconnecting.",
  "stack": "PrismaClientKnownRequestError: \nInvalid `prisma.invoice.create()` invocation:\n\n\nTransaction API error: Transaction not found. Transaction ID is invalid, refers to an old closed transaction Prisma doesn't have information about anymore, or was obtained before disconnecting.\n    at Zn.handleRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7459)\n    at Zn.handleAndLogRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at Zn.request (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n    at async D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\domain\\order\\order.services.ts:668:25\n    at async Proxy._transactionWithCallback (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:8139)\n    at async OrderServices.updateOrder (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\domain\\order\\order.services.ts:272:28)\n    at async updateOrder (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\api\\controllers\\table\\order.controller.ts:71:22)",
  "requestId": 16,
  "requestData": {
    "tableId": 8,
    "items": [
      {
        "id": 54,
        "menuItemId": 3,
        "price": 9000,
        "quantity": 1,
        "notes": ""
      },
      {
        "id": 55,
        "menuItemId": 3,
        "price": 9000,
        "quantity": 1,
        "notes": ""
      },
      {
        "id": 56,
        "menuItemId": 3,
        "price": 9000,
        "quantity": 1,
        "notes": ""
      },
      {
        "id": 49,
        "menuItemId": 3,
        "price": 9000,
        "quantity": 1,
        "notes": ""
      }
    ],
    "userId": 1,
    "reason": "Testing",
    "invoiceId": 19
  },
  "executionTime": 5626
}
[2025-08-12 16:05:50] error: Get Customer Payments:  
Invalid `prisma.customerPayment.findMany()` invocation:

{
  where: {
    createdAt: {},
    isLatestVersion: true,
    ~~~~~~~~~~~~~~~
    paymentMethod: "PAYMENT",
?   AND?: CustomerPaymentWhereInput | CustomerPaymentWhereInput[],
?   OR?: CustomerPaymentWhereInput[],
?   NOT?: CustomerPaymentWhereInput | CustomerPaymentWhereInput[],
?   id?: IntFilter | Int,
?   customerInfoId?: IntFilter | Int,
?   invoiceId?: IntNullableFilter | Int | Null,
?   invoiceNumber?: StringNullableFilter | String | Null,
?   amount?: IntFilter | Int,
?   note?: StringNullableFilter | String | Null,
?   paymentDate?: DateTimeFilter | DateTime,
?   updatedAt?: DateTimeFilter | DateTime,
?   customerInfo?: CustomerInfoScalarRelationFilter | CustomerInfoWhereInput,
?   invoice?: InvoiceNullableScalarRelationFilter | InvoiceWhereInput | Null
  },
  include: {
    customerInfo: {
      select: {
        id: true,
        name: true,
        phoneNumber: true,
        email: true,
        debt: true,
        initialDebt: true
      }
    },
    invoice: {
      select: {
        total: true
      }
    }
  },
  orderBy: {
    createdAt: "desc"
  },
  take: 20,
  skip: 0
}

Unknown argument `isLatestVersion`. Available options are marked with ?.
{
  "name": "PrismaClientValidationError",
  "clientVersion": "6.9.0",
  "stack": "PrismaClientValidationError: \nInvalid `prisma.customerPayment.findMany()` invocation:\n\n{\n  where: {\n    createdAt: {},\n    isLatestVersion: true,\n    ~~~~~~~~~~~~~~~\n    paymentMethod: \"PAYMENT\",\n?   AND?: CustomerPaymentWhereInput | CustomerPaymentWhereInput[],\n?   OR?: CustomerPaymentWhereInput[],\n?   NOT?: CustomerPaymentWhereInput | CustomerPaymentWhereInput[],\n?   id?: IntFilter | Int,\n?   customerInfoId?: IntFilter | Int,\n?   invoiceId?: IntNullableFilter | Int | Null,\n?   invoiceNumber?: StringNullableFilter | String | Null,\n?   amount?: IntFilter | Int,\n?   note?: StringNullableFilter | String | Null,\n?   paymentDate?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   customerInfo?: CustomerInfoScalarRelationFilter | CustomerInfoWhereInput,\n?   invoice?: InvoiceNullableScalarRelationFilter | InvoiceWhereInput | Null\n  },\n  include: {\n    customerInfo: {\n      select: {\n        id: true,\n        name: true,\n        phoneNumber: true,\n        email: true,\n        debt: true,\n        initialDebt: true\n      }\n    },\n    invoice: {\n      select: {\n        total: true\n      }\n    }\n  },\n  orderBy: {\n    createdAt: \"desc\"\n  },\n  take: 20,\n  skip: 0\n}\n\nUnknown argument `isLatestVersion`. Available options are marked with ?.\n    at kn (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Zn.handleRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7102)\n    at Zn.handleAndLogRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at Zn.request (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n    at async CRMServices.getCustomerPayments (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\domain\\settings\\crm\\crm.services.ts:960:24)\n    at async getCustomerPayments (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\api\\controllers\\settings\\crm\\crm.controller.ts:222:22)"
}
[2025-08-12 16:05:56] error: Get Customer Payments:  
Invalid `prisma.customerPayment.findMany()` invocation:

{
  where: {
    createdAt: {},
    isLatestVersion: true,
    ~~~~~~~~~~~~~~~
    paymentMethod: "PAYMENT",
?   AND?: CustomerPaymentWhereInput | CustomerPaymentWhereInput[],
?   OR?: CustomerPaymentWhereInput[],
?   NOT?: CustomerPaymentWhereInput | CustomerPaymentWhereInput[],
?   id?: IntFilter | Int,
?   customerInfoId?: IntFilter | Int,
?   invoiceId?: IntNullableFilter | Int | Null,
?   invoiceNumber?: StringNullableFilter | String | Null,
?   amount?: IntFilter | Int,
?   note?: StringNullableFilter | String | Null,
?   paymentDate?: DateTimeFilter | DateTime,
?   updatedAt?: DateTimeFilter | DateTime,
?   customerInfo?: CustomerInfoScalarRelationFilter | CustomerInfoWhereInput,
?   invoice?: InvoiceNullableScalarRelationFilter | InvoiceWhereInput | Null
  },
  include: {
    customerInfo: {
      select: {
        id: true,
        name: true,
        phoneNumber: true,
        email: true,
        debt: true,
        initialDebt: true
      }
    },
    invoice: {
      select: {
        total: true
      }
    }
  },
  orderBy: {
    createdAt: "desc"
  },
  take: 20,
  skip: 0
}

Unknown argument `isLatestVersion`. Available options are marked with ?.
{
  "name": "PrismaClientValidationError",
  "clientVersion": "6.9.0",
  "stack": "PrismaClientValidationError: \nInvalid `prisma.customerPayment.findMany()` invocation:\n\n{\n  where: {\n    createdAt: {},\n    isLatestVersion: true,\n    ~~~~~~~~~~~~~~~\n    paymentMethod: \"PAYMENT\",\n?   AND?: CustomerPaymentWhereInput | CustomerPaymentWhereInput[],\n?   OR?: CustomerPaymentWhereInput[],\n?   NOT?: CustomerPaymentWhereInput | CustomerPaymentWhereInput[],\n?   id?: IntFilter | Int,\n?   customerInfoId?: IntFilter | Int,\n?   invoiceId?: IntNullableFilter | Int | Null,\n?   invoiceNumber?: StringNullableFilter | String | Null,\n?   amount?: IntFilter | Int,\n?   note?: StringNullableFilter | String | Null,\n?   paymentDate?: DateTimeFilter | DateTime,\n?   updatedAt?: DateTimeFilter | DateTime,\n?   customerInfo?: CustomerInfoScalarRelationFilter | CustomerInfoWhereInput,\n?   invoice?: InvoiceNullableScalarRelationFilter | InvoiceWhereInput | Null\n  },\n  include: {\n    customerInfo: {\n      select: {\n        id: true,\n        name: true,\n        phoneNumber: true,\n        email: true,\n        debt: true,\n        initialDebt: true\n      }\n    },\n    invoice: {\n      select: {\n        total: true\n      }\n    }\n  },\n  orderBy: {\n    createdAt: \"desc\"\n  },\n  take: 20,\n  skip: 0\n}\n\nUnknown argument `isLatestVersion`. Available options are marked with ?.\n    at kn (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Zn.handleRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7102)\n    at Zn.handleAndLogRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at Zn.request (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n    at async CRMServices.getCustomerPayments (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\domain\\settings\\crm\\crm.services.ts:960:24)\n    at async getCustomerPayments (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\api\\controllers\\settings\\crm\\crm.controller.ts:222:22)"
}
[2025-08-12 17:56:46] error: Get Customer Payments:  
Invalid `prisma.customerPayment.findMany()` invocation:

{
  where: {
+   id: {
+     equals: Int | IntFieldRefInput,
+     in: Int[] | ListIntFieldRefInput,
+     notIn: Int[] | ListIntFieldRefInput,
+     lt: Int | IntFieldRefInput,
+     lte: Int | IntFieldRefInput,
+     gt: Int | IntFieldRefInput,
+     gte: Int | IntFieldRefInput,
+     not: Int | NestedIntFilter
+   }
  },
  include: {
    customerInfo: {
      select: {
        id: true,
        name: true,
        phoneNumber: true,
        email: true,
        debt: true,
        initialDebt: true
      }
    },
    invoice: {
      select: {
        total: true
      }
    }
  },
  orderBy: {
    createdAt: "desc"
  },
  take: 20,
  skip: 0
}

Argument `id` is missing.
{
  "name": "PrismaClientValidationError",
  "clientVersion": "6.9.0",
  "stack": "PrismaClientValidationError: \nInvalid `prisma.customerPayment.findMany()` invocation:\n\n{\n  where: {\n+   id: {\n+     equals: Int | IntFieldRefInput,\n+     in: Int[] | ListIntFieldRefInput,\n+     notIn: Int[] | ListIntFieldRefInput,\n+     lt: Int | IntFieldRefInput,\n+     lte: Int | IntFieldRefInput,\n+     gt: Int | IntFieldRefInput,\n+     gte: Int | IntFieldRefInput,\n+     not: Int | NestedIntFilter\n+   }\n  },\n  include: {\n    customerInfo: {\n      select: {\n        id: true,\n        name: true,\n        phoneNumber: true,\n        email: true,\n        debt: true,\n        initialDebt: true\n      }\n    },\n    invoice: {\n      select: {\n        total: true\n      }\n    }\n  },\n  orderBy: {\n    createdAt: \"desc\"\n  },\n  take: 20,\n  skip: 0\n}\n\nArgument `id` is missing.\n    at kn (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Zn.handleRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7102)\n    at Zn.handleAndLogRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at Zn.request (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n    at async CRMServices.getCustomerPayments (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\domain\\settings\\crm\\crm.services.ts:948:24)\n    at async getPaymentByCustomerId (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\api\\controllers\\finance\\finance.controller.ts:44:22)"
}
[2025-08-12 17:57:20] error: Get Customer Payments:  
Invalid `prisma.customerPayment.findMany()` invocation:

{
  where: {
+   id: {
+     equals: Int | IntFieldRefInput,
+     in: Int[] | ListIntFieldRefInput,
+     notIn: Int[] | ListIntFieldRefInput,
+     lt: Int | IntFieldRefInput,
+     lte: Int | IntFieldRefInput,
+     gt: Int | IntFieldRefInput,
+     gte: Int | IntFieldRefInput,
+     not: Int | NestedIntFilter
+   }
  },
  include: {
    customerInfo: {
      select: {
        id: true,
        name: true,
        phoneNumber: true,
        email: true,
        debt: true,
        initialDebt: true
      }
    },
    invoice: {
      select: {
        total: true
      }
    }
  },
  orderBy: {
    createdAt: "desc"
  },
  take: 20,
  skip: 0
}

Argument `id` is missing.
{
  "name": "PrismaClientValidationError",
  "clientVersion": "6.9.0",
  "stack": "PrismaClientValidationError: \nInvalid `prisma.customerPayment.findMany()` invocation:\n\n{\n  where: {\n+   id: {\n+     equals: Int | IntFieldRefInput,\n+     in: Int[] | ListIntFieldRefInput,\n+     notIn: Int[] | ListIntFieldRefInput,\n+     lt: Int | IntFieldRefInput,\n+     lte: Int | IntFieldRefInput,\n+     gt: Int | IntFieldRefInput,\n+     gte: Int | IntFieldRefInput,\n+     not: Int | NestedIntFilter\n+   }\n  },\n  include: {\n    customerInfo: {\n      select: {\n        id: true,\n        name: true,\n        phoneNumber: true,\n        email: true,\n        debt: true,\n        initialDebt: true\n      }\n    },\n    invoice: {\n      select: {\n        total: true\n      }\n    }\n  },\n  orderBy: {\n    createdAt: \"desc\"\n  },\n  take: 20,\n  skip: 0\n}\n\nArgument `id` is missing.\n    at kn (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Zn.handleRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7102)\n    at Zn.handleAndLogRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at Zn.request (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n    at async CRMServices.getCustomerPayments (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\domain\\settings\\crm\\crm.services.ts:948:24)\n    at async getPaymentByCustomerId (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\api\\controllers\\finance\\finance.controller.ts:44:22)"
}
[2025-08-12 17:57:22] error: Get Customer Payments:  
Invalid `prisma.customerPayment.findMany()` invocation:

{
  where: {
+   id: {
+     equals: Int | IntFieldRefInput,
+     in: Int[] | ListIntFieldRefInput,
+     notIn: Int[] | ListIntFieldRefInput,
+     lt: Int | IntFieldRefInput,
+     lte: Int | IntFieldRefInput,
+     gt: Int | IntFieldRefInput,
+     gte: Int | IntFieldRefInput,
+     not: Int | NestedIntFilter
+   }
  },
  include: {
    customerInfo: {
      select: {
        id: true,
        name: true,
        phoneNumber: true,
        email: true,
        debt: true,
        initialDebt: true
      }
    },
    invoice: {
      select: {
        total: true
      }
    }
  },
  orderBy: {
    createdAt: "desc"
  },
  take: 20,
  skip: 0
}

Argument `id` is missing.
{
  "name": "PrismaClientValidationError",
  "clientVersion": "6.9.0",
  "stack": "PrismaClientValidationError: \nInvalid `prisma.customerPayment.findMany()` invocation:\n\n{\n  where: {\n+   id: {\n+     equals: Int | IntFieldRefInput,\n+     in: Int[] | ListIntFieldRefInput,\n+     notIn: Int[] | ListIntFieldRefInput,\n+     lt: Int | IntFieldRefInput,\n+     lte: Int | IntFieldRefInput,\n+     gt: Int | IntFieldRefInput,\n+     gte: Int | IntFieldRefInput,\n+     not: Int | NestedIntFilter\n+   }\n  },\n  include: {\n    customerInfo: {\n      select: {\n        id: true,\n        name: true,\n        phoneNumber: true,\n        email: true,\n        debt: true,\n        initialDebt: true\n      }\n    },\n    invoice: {\n      select: {\n        total: true\n      }\n    }\n  },\n  orderBy: {\n    createdAt: \"desc\"\n  },\n  take: 20,\n  skip: 0\n}\n\nArgument `id` is missing.\n    at kn (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Zn.handleRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7102)\n    at Zn.handleAndLogRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at Zn.request (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n    at async CRMServices.getCustomerPayments (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\domain\\settings\\crm\\crm.services.ts:948:24)\n    at async getPaymentByCustomerId (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\api\\controllers\\finance\\finance.controller.ts:44:22)"
}
[2025-08-12 17:57:23] error: Get Customer Payments:  
Invalid `prisma.customerPayment.findMany()` invocation:

{
  where: {
+   id: {
+     equals: Int | IntFieldRefInput,
+     in: Int[] | ListIntFieldRefInput,
+     notIn: Int[] | ListIntFieldRefInput,
+     lt: Int | IntFieldRefInput,
+     lte: Int | IntFieldRefInput,
+     gt: Int | IntFieldRefInput,
+     gte: Int | IntFieldRefInput,
+     not: Int | NestedIntFilter
+   }
  },
  include: {
    customerInfo: {
      select: {
        id: true,
        name: true,
        phoneNumber: true,
        email: true,
        debt: true,
        initialDebt: true
      }
    },
    invoice: {
      select: {
        total: true
      }
    }
  },
  orderBy: {
    createdAt: "desc"
  },
  take: 20,
  skip: 0
}

Argument `id` is missing.
{
  "name": "PrismaClientValidationError",
  "clientVersion": "6.9.0",
  "stack": "PrismaClientValidationError: \nInvalid `prisma.customerPayment.findMany()` invocation:\n\n{\n  where: {\n+   id: {\n+     equals: Int | IntFieldRefInput,\n+     in: Int[] | ListIntFieldRefInput,\n+     notIn: Int[] | ListIntFieldRefInput,\n+     lt: Int | IntFieldRefInput,\n+     lte: Int | IntFieldRefInput,\n+     gt: Int | IntFieldRefInput,\n+     gte: Int | IntFieldRefInput,\n+     not: Int | NestedIntFilter\n+   }\n  },\n  include: {\n    customerInfo: {\n      select: {\n        id: true,\n        name: true,\n        phoneNumber: true,\n        email: true,\n        debt: true,\n        initialDebt: true\n      }\n    },\n    invoice: {\n      select: {\n        total: true\n      }\n    }\n  },\n  orderBy: {\n    createdAt: \"desc\"\n  },\n  take: 20,\n  skip: 0\n}\n\nArgument `id` is missing.\n    at kn (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Zn.handleRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7102)\n    at Zn.handleAndLogRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at Zn.request (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n    at async CRMServices.getCustomerPayments (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\domain\\settings\\crm\\crm.services.ts:948:24)\n    at async getPaymentByCustomerId (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\api\\controllers\\finance\\finance.controller.ts:44:22)"
}
[2025-08-12 18:07:04] error: Get Customers Service:  
Invalid `prisma.customerPayment.aggregate()` invocation:

{
  select: {
    _sum: {
      select: {
        amount: true
      }
    },
    _count: {
      select: {
?       id?: true,
?       customerInfoId?: true,
?       invoiceId?: true,
?       invoiceNumber?: true,
?       amount?: true,
?       note?: true,
?       paymentDate?: true,
?       createdAt?: true,
?       updatedAt?: true,
?       _all?: true
      }
    }
  },
  where: {
    customerInfoId: 1
  }
}

The `select` statement for type CustomerPaymentCountAggregateOutputType must not be empty. Available options are marked with ?.
{
  "name": "PrismaClientValidationError",
  "clientVersion": "6.9.0",
  "stack": "PrismaClientValidationError: \nInvalid `prisma.customerPayment.aggregate()` invocation:\n\n{\n  select: {\n    _sum: {\n      select: {\n        amount: true\n      }\n    },\n    _count: {\n      select: {\n?       id?: true,\n?       customerInfoId?: true,\n?       invoiceId?: true,\n?       invoiceNumber?: true,\n?       amount?: true,\n?       note?: true,\n?       paymentDate?: true,\n?       createdAt?: true,\n?       updatedAt?: true,\n?       _all?: true\n      }\n    }\n  },\n  where: {\n    customerInfoId: 1\n  }\n}\n\nThe `select` statement for type CustomerPaymentCountAggregateOutputType must not be empty. Available options are marked with ?.\n    at kn (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Zn.handleRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7102)\n    at Zn.handleAndLogRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at Zn.request (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n    at async D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\domain\\finance\\finance.services.ts:93:35\n    at async Promise.all (index 0)\n    at async FinanceServices.getCustomers (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\domain\\finance\\finance.services.ts:91:15)\n    at async getCustomers (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\api\\controllers\\finance\\finance.controller.ts:32:22)"
}
[2025-08-12 18:12:32] error: Get Customer Payments:  
Invalid `prisma.customerPayment.findMany()` invocation:

{
  where: {
+   customerInfoId: {
+     equals: Int | IntFieldRefInput,
+     in: Int[] | ListIntFieldRefInput,
+     notIn: Int[] | ListIntFieldRefInput,
+     lt: Int | IntFieldRefInput,
+     lte: Int | IntFieldRefInput,
+     gt: Int | IntFieldRefInput,
+     gte: Int | IntFieldRefInput,
+     not: Int | NestedIntFilter
+   }
  },
  include: {
    customerInfo: {
      select: {
        id: true,
        name: true,
        phoneNumber: true,
        email: true,
        debt: true,
        initialDebt: true
      }
    },
    invoice: {
      select: {
        total: true
      }
    }
  },
  orderBy: {
    createdAt: "desc"
  },
  take: 20,
  skip: 0
}

Argument `customerInfoId` is missing.
{
  "name": "PrismaClientValidationError",
  "clientVersion": "6.9.0",
  "stack": "PrismaClientValidationError: \nInvalid `prisma.customerPayment.findMany()` invocation:\n\n{\n  where: {\n+   customerInfoId: {\n+     equals: Int | IntFieldRefInput,\n+     in: Int[] | ListIntFieldRefInput,\n+     notIn: Int[] | ListIntFieldRefInput,\n+     lt: Int | IntFieldRefInput,\n+     lte: Int | IntFieldRefInput,\n+     gt: Int | IntFieldRefInput,\n+     gte: Int | IntFieldRefInput,\n+     not: Int | NestedIntFilter\n+   }\n  },\n  include: {\n    customerInfo: {\n      select: {\n        id: true,\n        name: true,\n        phoneNumber: true,\n        email: true,\n        debt: true,\n        initialDebt: true\n      }\n    },\n    invoice: {\n      select: {\n        total: true\n      }\n    }\n  },\n  orderBy: {\n    createdAt: \"desc\"\n  },\n  take: 20,\n  skip: 0\n}\n\nArgument `customerInfoId` is missing.\n    at kn (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Zn.handleRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7102)\n    at Zn.handleAndLogRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at Zn.request (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n    at async CRMServices.getCustomerPayments (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\domain\\settings\\crm\\crm.services.ts:948:24)\n    at async getPaymentByCustomerId (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\api\\controllers\\finance\\finance.controller.ts:44:22)"
}
[2025-08-12 18:12:34] error: Get Customer Payments:  
Invalid `prisma.customerPayment.findMany()` invocation:

{
  where: {
+   customerInfoId: {
+     equals: Int | IntFieldRefInput,
+     in: Int[] | ListIntFieldRefInput,
+     notIn: Int[] | ListIntFieldRefInput,
+     lt: Int | IntFieldRefInput,
+     lte: Int | IntFieldRefInput,
+     gt: Int | IntFieldRefInput,
+     gte: Int | IntFieldRefInput,
+     not: Int | NestedIntFilter
+   }
  },
  include: {
    customerInfo: {
      select: {
        id: true,
        name: true,
        phoneNumber: true,
        email: true,
        debt: true,
        initialDebt: true
      }
    },
    invoice: {
      select: {
        total: true
      }
    }
  },
  orderBy: {
    createdAt: "desc"
  },
  take: 20,
  skip: 0
}

Argument `customerInfoId` is missing.
{
  "name": "PrismaClientValidationError",
  "clientVersion": "6.9.0",
  "stack": "PrismaClientValidationError: \nInvalid `prisma.customerPayment.findMany()` invocation:\n\n{\n  where: {\n+   customerInfoId: {\n+     equals: Int | IntFieldRefInput,\n+     in: Int[] | ListIntFieldRefInput,\n+     notIn: Int[] | ListIntFieldRefInput,\n+     lt: Int | IntFieldRefInput,\n+     lte: Int | IntFieldRefInput,\n+     gt: Int | IntFieldRefInput,\n+     gte: Int | IntFieldRefInput,\n+     not: Int | NestedIntFilter\n+   }\n  },\n  include: {\n    customerInfo: {\n      select: {\n        id: true,\n        name: true,\n        phoneNumber: true,\n        email: true,\n        debt: true,\n        initialDebt: true\n      }\n    },\n    invoice: {\n      select: {\n        total: true\n      }\n    }\n  },\n  orderBy: {\n    createdAt: \"desc\"\n  },\n  take: 20,\n  skip: 0\n}\n\nArgument `customerInfoId` is missing.\n    at kn (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:29:1363)\n    at Zn.handleRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:7102)\n    at Zn.handleAndLogRequestError (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6784)\n    at Zn.request (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:121:6491)\n    at async l (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\node_modules\\@prisma\\client\\runtime\\library.js:130:9778)\n    at async CRMServices.getCustomerPayments (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\domain\\settings\\crm\\crm.services.ts:948:24)\n    at async getPaymentByCustomerId (D:\\Programing\\WorkFolders\\restaurant-pos\\backend\\src\\api\\controllers\\finance\\finance.controller.ts:44:22)"
}
